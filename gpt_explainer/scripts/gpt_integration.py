import asyncio
import time
import openai
from openai.error import Timeout, RateLimitError
from typing import Any, Tuple

PROMPT_USER_CONTENT_TEMPLATE = """This text is from a PowerPoint file titled '{}' (from slide number {}). The slide contains the following content: {}. 
Please provide a detailed yet easy-to-understand explanation of the main points and concepts covered in this slide. Ensure the explanation is suitable for someone new to the material.
For example, if the slide content is:
"Photosynthesis is the process by which green plants and some other organisms use sunlight to synthesize foods with the help of chlorophyll. It involves the conversion of carbon dioxide and water into glucose and oxygen."
Your response could be:
"Photosynthesis process: Photosynthesis is a vital process for plants and some other organisms, allowing them to produce food using sunlight.
Role of chlorophyll: Chlorophyll, the green pigment in plants, helps in capturing sunlight.
Conversion of substances: During photosynthesis, plants convert carbon dioxide and water into glucose, which is used as food, and oxygen, which is released into the air."
"""

PROMPT_SYSTEM_ROLE = """You are an expert educator specializing in making complex topics easy to understand. 
Your goal is to provide detailed yet easy-to-understand text, explaining the content of a given PowerPoint slide.
The text you provide will be used to help students understand the material better.
"""

MODEL = "gpt-3.5-turbo"
TEMPERATURE = 0.7
TIMEOUT = 500
MAX_RETRIES = 5
SLEEP_TIME = 30

class GPTIntegration:
    """
    A class to integrate GPT-3.5 for generating explanations for PowerPoint slides.

    Attributes:
        
        api_key (str): The API key for accessing OpenAI.
        presentation_title (str): The title of the PowerPoint presentation.
        organization (str): The organization ID for OpenAI (default is 'org-K7cOPp2AJvDDYNsBn8Vs8U1u').
        project (str): The project name for OpenAI (default is 'Default project').
    """

    def __init__(self, api_key: str, presentation_title: str, organization: str = 'org-K7cOPp2AJvDDYNsBn8Vs8U1u', project: str = 'Default project'):
        """
        Initializes the GPTIntegration class with the provided API key, presentation title, organization, and project.
        """
        openai.organization = organization
        openai.project = project
        openai.api_key = api_key
        self.presentation_title = presentation_title

    async def get_gpt_explanation(self, text: str, slide_number: int) -> Tuple[int, str]:
        """
        Gets an explanation from GPT-3.5 for a given text.

        Parameters:     
            text (str): The text content of the slide.
            slide_number (int): The slide number.

        Returns:
            (Tuple[int, str]): The slide number and the explanation generated by GPT-3.5.
        """
        print(f"Processing slide number {slide_number}\n")

        try:
            response = await self.asynchronous_api_call(text, slide_number)
            print(f"Successfully processed slide number {slide_number}\n")
            return slide_number, response.choices[0].message.content
        except Exception as e:
            print(e)
            raise Exception(e)



    async def asynchronous_api_call(self, text: str, slide_number: int) -> Any:
        """
        Makes an asynchronous call to the GPT-3.5 API to get an explanation for a given slide content.
        Try to make the call 5 times in case of a rate limit error.

        Parameters:
            text (str): The text content of the slide.
            slide_number (int): The slide number.

        Returns:
            (Any): The response from the GPT-3.5 API.
    
        Raises:
            Timeout: If the request times out.
            RateLimitError: If the request exceeds the rate limit.
            Exception: If an error occurs during the API call.
        """
        for i in range(MAX_RETRIES):
            try:
                return await openai.ChatCompletion.acreate(
                    model=MODEL,
                    messages=[
                        {"role": "system", "content": PROMPT_SYSTEM_ROLE},
                        {"role": "user", "content": PROMPT_USER_CONTENT_TEMPLATE.format(self.presentation_title, slide_number, text)}
                    ],
                    max_tokens=600, 
                    temperature=TEMPERATURE,
                    timeout=TIMEOUT
                )
            except RateLimitError:
                print(f"Rate limit exceeded for slide number:{slide_number}. Task sleeping for 30 seconds.")
                await asyncio.sleep(30)       
            except Timeout as e:
                raise Timeout(f"Slide number {slide_number} has not been processed due to a timeout error: {e}")
            except Exception as e:
                raise Exception(f"Slide number {slide_number} has not been processed due to an error: {e}")
        
        raise Exception(f"Failed to process slide number {slide_number} after 5 attempts.")
